<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Nordy Vlasman</title><description>nordyvlasman.nl</description><link>https://nordyvlasman.nl</link><language>en</language><lastBuildDate>Fri, 9 Oct 2020 13:36:54 +0200</lastBuildDate><pubDate>Fri, 9 Oct 2020 13:36:54 +0200</pubDate><ttl>250</ttl><atom:link href="https://nordyvlasman.nl/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/tutorial-week</guid><title>Swift design patterns.</title><description>Swift design patterns</description><link>https://nordyvlasman.nl/posts/tutorial-week</link><pubDate>Wed, 30 Sep 2020 12:30:00 +0200</pubDate><content:encoded><![CDATA[<p>Aan het begin van de periode had ik mijzelf een doel gegeven. Beter worden in het maken van iOS apps door middel van Swift. Het idee hiervan is dat ik tot nu toe veel dingen doe die of op internet staan of niet optimaal gemaakt zijn. Hierdoor kan het zijn dat de apps traag worden en dus niet fijn werken.</p><h2>Maar hoe wil ik dit aanpakken?</h2><p>Om te beginnen heb ik een aantal boeken aangeschaft. Het gaat hier om de boeken van <a href="https://hackingwithswift.com">Hacking With Swift</a> waarbij mijn focus vooral uitgaat op Swift design patterns en Testing in swift. Dit omdat ik voor mijn kennis over Swift goed gebruik kan maken van Swift design patterns. En als ik dit goed combineer met Testing in Swift, kan ik functionaliteit direct controleren op werking.</p><p>Voor de komende aantal weken ga ik mij dus bezig houden met het lezen van Swift boeken en het uitproberen van nieuwe design patterns.</p><h2>1e tutorial week</h2><p>Voor een logische volgorde ben ik in de 1e tutorial week begonnen met het boek <a href="https://www.hackingwithswift.com/store/swift-design-patterns">Swift design patterns</a>. Waarom is dit logisch? Simpel, omdat een gestructureerde code goed ingericht is.<br><br>Waarom heb ik eigenlijk gekozen voor een boek in plaats van een udemy course? Dit is voornamelijk omdat ik het prettiger vindt om dingen te lezen in plaats van telkens op pauze te drukken om iets na te moeten doen. Daarnaast is het ook erg fijn om iets te hebben waar je snel terug op kan komen door even snel het boek erbij te pakken.</p><h3>Mijn voortgang</h3><p>In de 1e tutorial week ben ik dus begonnen met het boek, in dit boek wordt op een prettige manier uitgelegd hoe diverse design patterns werken. Daarnaast word er uitgebreid uitgelegd wat de gedachtengang achter bepaalde onderwerpen is met daarbij eigen ervaringen.</p><p>Protocol, initializers, extensions, alles komt wel naar voren in het boek. Aan het begin was dit best wel overwhelming, ik kon apps maken in Swift maar dacht nooit echt na hoe en waarom ik iets doe. Door dit boek ben ik heel anders gaan denken over bepaalde keuzes die ik maak. Bijvoorbeeld hoe ik mijn code verdeel in logische structuur, voorheen had ik alles in mijn ViewController. Sommige models stonden er los van, maar verder alle logische data kwam daarin. Hierdoor krijg je een erg lang bestand die niet meer leesbaar is.</p><h2>Toepassen</h2><p>Nu ik zoveel geleerd heb van dit boek, wil ik het een en ander ook gaan toepassen. Voor TGIF is mijn doel om een Backend Driven UI package te schrijven voor SwiftUI. Hierdoor wil ik mijn kennis die ik heb verkregen van het boek toepassen in een package. Dit is namelijk een perfecte plaats om structuur te testen. Mijn voortgang van dit project is te zien op <a href="https://github.com/NordyVlasman/declarative-swiftui" target="_blank">github</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/publish</guid><title>Een blog maken in Publish en TailwindCSS</title><description>Ik ben toch maar voor publish gegaan, was wat leuker :)</description><link>https://nordyvlasman.nl/posts/publish</link><pubDate>Tue, 22 Sep 2020 12:30:00 +0200</pubDate><content:encoded><![CDATA[<p>Jawel, ik kon het niet laten. Mijn vorige blog/ site (geschreven in NextJS) was er net 2 weken en ik wilde al iets nieuws. Daar ging ik weer, ik opende mn terminal en ik starte een nieuw project.</p><pre><code><div class="highlight"><span></span>$ Publish new nordyvlasman
</div></code></pre><p>Huh maar dat is helemaal niet een bekend frontend framework, wat doe ik nou?!? Jawel, ik ging een poging wagen met <a href="https://github.com/johnsundell/publish" target="_blank">Publish</a>.</p><h2>Wat is Publish dan?</h2><p>Leuk dat je dat vraagt! Publish is een statische website generator (Praise letterlijke vertaling.. Sorry ü§¶‚Äç‚ôÇÔ∏è) gemaakt door John Sundell. De github pagina van Publish zegt het volgende erover.</p><blockquote><p>Welcome to Publish, a static site generator built specifically for Swift developers. It enables entire websites to be built using Swift, and supports themes, plugins and tons of other powerful customization options.</p></blockquote><p>Klinkt heel fancy, en ja, dat is het ook. Het genot van werken met Swift in combinatie met TailwindCSS is niet te beschrijven. Je kan zeggen dat het overbodig veel werk is om een simpele site te maken. Maar, naast dat het technisch erg leuk is. Zit het ook nog eens heel goed in elkaar. Waarom zou je wel een Javascript framework gebruiken en niet zoiets?</p><h2>Je hebt je punt gemaakt Nordy, ga verder..</h2><p>Oke oke, fijn. Dan kan ik nu lekker technisch gaan doen ü§ó.</p><p><strong>Disclaimer:</strong> <em>Alles wat hieronder staat is gebaseerd op wat ik zelf heb gemaakt en mijn ervaringen. Dit kan voor een ieder anders zijn!</em></p><p>Mijn "vorige" blog was in NextJS en Tailwind gemaakt en zag er naar mijn mening niet verkeerd uit. Daarom was mijn doel om NextJS te vervangen voor Publish en tailwind met zijn stijlen te behouden in de nieuwe omgeving. Makje toch?</p><p>Ja nou niet zo snel, tijdens mijn zoektocht naar de juiste manier om tailwind toe te voegen aan mijn project. Ben ik tegen een aantal problemen aangelopen. TailwindCSS heeft namelijk 2 manieren om te gebruiken. Je kan de minified versie ophalen vanuit een CDN of je kan NPM/ Yarn gebruiken om de code binnen te krijgen. Dat laatste is de meest voorkomende variant, dit geeft je namelijk veel meer vrijheid bij het customizen van de Tailwind style. Maar hoe ga ik ooit een manier vinden om een npm package toe te voegen aan een swift project ü§î.</p><p>Ik heb dit voor elkaar gekregen door in de main folder van het project een commando uit te voeren die ik al erg vaak heb uitgevoerd.</p><pre><code><div class="highlight"><span></span>yarn add tailwindcss
</div></code></pre><p>Daar ging mijn terminal, zoekend naar de juiste packages om in het project te stoppen. Niets en niemand die hem tegen hield. En jawel, na enige tijd (want het blijft een variant van npm) had ik daar 3 nieuwe bestanden/ mappen. - Package.json - Yarn.lock - node_modules (Met daarin inmens veel mapjes met weet ik veel wat) Tailwind was klaar om gebruikt te worden.</p><h3>Van tailwind naar css</h3><p>Tailwind stond op mn computer maar werd nog niet gebruikt. Het was dus tijd om tailwind zijn werk te laten doen. Dit was het moment waar ik moest nadenken. Het is voor een tailwind project gebruikelijk dat je een config bestand aanmaakt in de root map. Maar dit is niet een gebruikelijk project. Na een diepe speurtocht op het internet kwam ik een artikel tegen die mij precies uitlegde hoe ik dit moest doen: <a href="https://paraside.in/design+code/publish+tailwindcss/"> Power your Publish (Swift) static site with Tailwind CSS</a>. Volgens dit artikel moest ik mijn configuratie bestand in mijn Thema stoppen. In deze map kwamen dan ook theme.css en styles.css. Is dit wel de juiste manier vroeg ik mij af.</p><img src="https://media1.tenor.com/images/859b945f2ceaa00508d24a1340e2643d/tenor.gif?itemid=11946992"/><p>Oke, dat is wel heel snel maar het is wel echt waar. Ik heb het geprobeerd maar het voelde niet goed, in het kader van automatiseren en goed voor het oog, heb ik besloten om mijn eigen oplossing te gebruiken.</p><h3>Wat voor oplossing is dat dan?</h3><p>In 1 woord, Gulp. Ik heb in dit project gulp toegevoegd om mijn Tailwind configuratie om te zetten naar een minified css bestand die ik vervolgens in kan laden in mijn publish project. Dit ziet er dan zo uit:</p><pre><code><div class="highlight"><span></span><span class="kr">const</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">tailwindConfig</span> <span class="o">=</span> <span class="s2">&quot;tailwind.config.js&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">mainCSS</span> <span class="o">=</span> <span class="s2">&quot;./Resources/MyTheme/theme.css&quot;</span><span class="p">;</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&quot;css&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">atimport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;postcss-import&quot;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">postcss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-postcss&quot;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">tailwindcss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;tailwindcss&quot;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">rename</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-rename&#39;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">cleanCSS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-clean-css&#39;</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">gulp</span>
        <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">mainCSS</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">postcss</span><span class="p">([</span><span class="nx">atimport</span><span class="p">(),</span> <span class="nx">tailwindcss</span><span class="p">(</span><span class="nx">tailwindConfig</span><span class="p">)]))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">cleanCSS</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">rename</span><span class="p">(</span><span class="s1">&#39;styles.css&#39;</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&quot;./Resources/MyTheme/&quot;</span><span class="p">));</span>
<span class="p">});</span>
</div></code></pre><p><em>gulpfile.js</em></p><p>Ik begin in dit bestand met het importeren van de nodige tools en bestanden. In dit geval gulp, mainCSS en tailwindConfig. Gulp wordt gebruikt voor het converteren van tailwindcss naar css. TailwindConfig voor de configuratie van tailwind (andere kleuren, typografie etc). en mainCSS is het bestand waarin ik tailwind importeer en aanpas daar waar nodig.</p><p>In de CSS Task importeer ik vervolgens de nodige tools om het bestand te kunnen hernoemen, minifieen en verifi√´ren.</p><p>De configuratie van gulp is klaar. Maar hoe gebruik ik dit? Simpel, met yarn, ik heb in mijn package.json een script toegevoegd die hiervoor zorgt.</p><pre><code><div class="highlight"><span></span>  <span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&quot;build&quot;</span><span class="p">:</span> <span class="s2">&quot;gulp css --silent&quot;</span>
  <span class="p">}</span>
</div></code></pre><p>Zoals je ziet, kan ik nu yarn build intypen in mijn terminal om vervolgens te zien hoe mijn tailwind omgezet wordt naar css.</p><h2>Hey leuk joh! Maar hoe zit dat met publish dan?</h2><p>Ja, nou kijk. Nu kan ik in publish bij het defineren van mijn thema aangeven welk css bestand ik wil gebruiken. In dit geval is dat <code>MyThemes/Style.css</code> dit bestand wordt vervolgens gebruikt over de hele website. Hierdoor kan ik aan elk html element een class toevoegen die vervolgens een mooi resultaat geeft kijk maar eens hoe ik dat doe.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Node</span> <span class="k">where</span> <span class="n">Context</span> <span class="p">==</span> <span class="n">HTML</span><span class="p">.</span><span class="n">BodyContext</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">siteHeader</span><span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Website</span><span class="p">&gt;(</span><span class="k">for</span> <span class="n">context</span><span class="p">:</span> <span class="n">PublishingContext</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="n">Node</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">header</span><span class="p">(</span>
            <span class="p">.</span><span class="n">wrapper</span><span class="p">(</span>
                <span class="p">.</span><span class="n">nav</span><span class="p">(</span>
                    <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;site-name&quot;</span><span class="p">),</span>
                    <span class="p">.</span><span class="n">a</span><span class="p">(</span>
                        <span class="p">.</span><span class="n">href</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">),</span>
                        <span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">name</span><span class="p">),</span>
                        <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;font-bold text-blue-500 text-2xl hover:text-blue-700&quot;</span><span class="p">)</span>
                    <span class="p">)</span>
                <span class="p">)</span>
            <span class="p">),</span>
            <span class="p">.</span><span class="n">wrapper</span><span class="p">(</span>
                <span class="p">.</span><span class="n">a</span><span class="p">(</span>
                    <span class="p">.</span><span class="n">href</span><span class="p">(</span><span class="s">&quot;https://github.com/NordyVlasman&quot;</span><span class="p">),</span>
                    <span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="s">&quot;Github &amp;rarr;&quot;</span><span class="p">),</span>
                    <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;font-medium text-gray-500 hover:text-gray-700&quot;</span><span class="p">)</span>
                <span class="p">),</span>
                <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;text-base leading-5&quot;</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;flex justify-between items-center py-10&quot;</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Wat je hier ziet is de header van deze website. Hierin staat een titel en een link naar mijn github pagina. Voor elk html element heb ik een class property toegevoegd waar ik vervolgens mijn stijl aan kan geven. Mooi he?</p><h2>Conclusie</h2><p>De combinatie van Swift Publish met TailwindCSS is erg sterk. Je moet alleen wel de juiste manier vinden om dit netjes te doen. In mijn <a href="https://github.com/NordyVlasman/nordyvlasman" target="_blank">github repository</a> kan je verder kijken naar hoe ik mijn website in elkaar heb gesleuteld. Wellicht vindt je het interessant üòä.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/een-blog-maken-in-nextjs</guid><title>Een blog maken in NextJS en TailwindCSS</title><description>Een kleine beschrijving over mijn ervaring van het maken van een blog in NextJS.</description><link>https://nordyvlasman.nl/posts/een-blog-maken-in-nextjs</link><pubDate>Mon, 31 Aug 2020 12:00:00 +0200</pubDate><content:encoded><![CDATA[<p>Voor de minor 'The next web' kreeg ik de opdracht om een blog te maken waarin ik bij kan houden wat ik leer en uitspook. Dit kwam op een perfect moment, ik was al een tijdje van plan om NextJS te leren maar kon niet iets vinden waarvoor ik het kon gebruiken. Daarom pakte ik mijn kans om mijn blog te maken in <a href="https://nextjs.org/" target="_blank">NextJS</a> in combinatie met <a href="https://tailwindcss.com/" target="_blank">Tailwind</a> want dat is awesome.</p><blockquote><p>Op dit moment is dit 'artikel' verouderd. Ik heb mijn blog omgezet naar Publish. Meer hierover kan je <a href="https://nordyvlasman.nl/posts/publish/">hier</a> lezen.</p></blockquote><h2>Wat is NextJS?</h2><p>NextJS is een framework gebaseerd, afgeleid van het framework ReactJS. Dat klinkt best raar. Maar het valt best wel mee, Vue heeft Nuxt, React heeft Next (En Gatsby en Blitz en weet ik veel wat nog meer. Mensen zijn slecht in het maken van keuzes ü§¶‚Äç‚ôÇÔ∏è). Het geeft volgens hun zelf de beste ontwikkelaar ervaring met alle toevoegingen die je nodig hebt in productie. Statisch en Server rendering, Typescript, Route pre-fetching!! en meer, zonder configuratie. Dat is een lange zin die mij zelf erg enthousiast maakt, dus ging ik erop los.</p><h2>Mijn ervaring</h2><p>NextJS is op zichzelf een fijn en eenvoudige toevoeging over React zelf. In verband met mijn tot nu toe redelijk korte ervaring met Typescript heb ik er voor gekozen om plain JS te gebruiken. De makkelijkheden zoals Route prefetching maken je leven een stuk eenvoudiger. Daarnaast is het erg eenvoudig om Markdown support toe te voegen en je eigen componentjes te maken. Kortom, een fijne tool als je verder wilt kijken dan alleen ReactJS. Maar, begin daar wel eerst mee. Het is nog steeds erg nuttig om de kennis van React te hebben tijdens het ontwikkelen van een Next applicatie.</p><p>Je kan natuurlijk ook voor Vue of Angular kiezen, of ieder ander opkomende framework waar je vrolijk van wordt. Maar voor de uitdaging is React toch echt wel leuker.</p><h3>Mag ik nog heel even?</h3><p>Wil je geen uitdaging en wel een frontend framework gebruiken? Ga dan lekker voor NuxtJS. Je hebt niet veel kennis nodig en je kan meteen aan de slag ü•≥.</p>]]></content:encoded></item></channel></rss>