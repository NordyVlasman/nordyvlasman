<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Nordy Vlasman</title><description>nordyvlasman.nl</description><link>https://nordyvlasman.nl</link><language>en</language><lastBuildDate>Tue, 12 Jan 2021 16:15:09 +0100</lastBuildDate><pubDate>Tue, 12 Jan 2021 16:15:09 +0100</pubDate><ttl>250</ttl><atom:link href="https://nordyvlasman.nl/feed.xml" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/semester-teardown</guid><title>Semester Teardown</title><description>Wow, dat was best raar..</description><link>https://nordyvlasman.nl/posts/semester-teardown</link><pubDate>Mon, 11 Jan 2021 12:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Van het thuiswerken tot het maken van een AR app. Het was een uitdagend semester. In deze post ga ik het hebben over de dingen die ik heb gedaan, geleerd en wat ik mee ga nemen naar de toekomst. Dat zijn nogal wat dingen, dus laat ik snel beginnen.</p><h2>Een blog maken</h2><p>Misschien wel een van de eerste dingen die ik niet verwacht had ooit te doen. Het maken van een blog. Want waar moet ik het over hebben, waarom zou ik dit doen? En dan ook nog publiek maken, dat was toch wel eng voor mij. Maar hier sta ik, mn 6e post waarin ik een samenvatting maak over het afgelopen halve jaar. Het ontwikkelen van de blog was punt 1, ik ben nogal een freak als het gaat om frameworks. Dus ik kon maar lastig een keuze maken wat ik zou gebruiken voor mijn blog. Na eerst een snelle versie te maken in <a href="">NextJS</a>, heb ik in een later stadium mijn blog overgeschreven naar <a href="">Publish</a>. Het was een enorm leuke ervaring om hier mee bezig te zijn, een website maken in mijn favoriete programmeertaal Swift. Dat was toch wel een fijne bezigheid.</p><p>Toen mijn blog eenmaal stond, begon ik met het schrijven van posts. De eerste ging over het maken van mijn blog in NextJS. Daarin gaf ik mijn bevindingen en mijn mening over hoe het is om NextJS te gebruiken. Tijdens het schrijven van deze post kwam ik erachter dat je naar een heleboel interessante dingen gaat kijken. Naast de manier van schrijven, valt het ook op dat je toch dieper de techniek ingaat om je uitleg een beetje te kunnen onderbouwen. Dat was best wel een leuke openbaring waar ik veel van geleerd heb. En ik heb ook het gevoel dat ik bij het schrijven van elke nieuwe post weer wat betere kwaliteit leverde. Mijn grootste trots is mijn posts over het maken van een blog in publish. Hier kwam mijn passie van Swift in combinatie met het maken van een site bijeen. Wat resulteerde in een best leuke post.</p><h2>Een podcast opnemen</h2><p>Ook nog zoiets wat ik echt nooit had gedaan zonder deze minor. Het opnemen van een podcast was echt iets buiten mijn comfortzone. Ik ben iemand die graag praat, maar om dat op te nemen... Nee dat is niet iets voor mij. Dacht ik in ieder geval, want toen Bram met het idee kwam om mee te doen hieraan werd ik wel een beetje enthousiast. En wat een goede keuze is dit geweest. Naast dat het erg leuk was om te praten over technologie, was het ook nog leerzaam. Ik ben erachter gekomen hoeveel werk het is om een podcast uit te brengen. En wat voor tijd het kost om van het voorbereiden tot het bewerken te komen. Het verbaasd mij dat het zoveel moeite kost om een nette podcast te maken die ook nog lekker doorluisterd.</p><p>Door de periode heen hebben we een aantal podcasts opgenomen en het begint steeds beter te klinken. Ik heb verschillende programma's gebruikt voor het bewerken van een podcast waardoor ik ondertussen de juiste flow heb gevonden. Zodra je in deze flow komt, kost alles natuurlijk minder tijd en moeite. Maar om zo ver te komen, moet je gemotiveerd zijn en het leuk vinden (Vind ik in ieder geval). Naast het bewerken had ik ook nog het publiceren. Waar we begonnen bij soundcloud. Is onze podcast ondertussen te vinden op Spotify, Apple Podcast en TuneIn. De 3 grootste partijen voor het uitbrengen van een podcast. En daar ben ik zelf best wel trots op ☺️.</p><blockquote><p>Voor het volgend semester willen Bram en ik verder gaan met het opnemen van de podcast. Dan wil ik mij ook verdiepen in het naar buiten brengen van een podcast. En natuurlijk een beter structuur in wanneer we iets opnemen is ook niet verkeerd.</p></blockquote><h2>Een AR App maken.</h2><p>Wow, dit was ook nog zo'n ding wat best wel uitdagend was. Het maken van een AR app is niet iets wat je binnen 2 weken op de juiste manier gedaan krijgt. Het kost veel tijd en moeite om de technologie te begrijpen. Voornamelijk omdat je in 3D werkt en daarin ook nog interacties moet toevoegen. Naast AR hadden we ook de uitdaging van Data opslag (met behulp van Core Data) en het maken van een fijne overzichtelijke interface. Dit alles bij elkaar heeft ervoor gezorgd dat ik flink wat programmeer uurtjes heb moeten maken, misschien wel meer dan ik had verwacht en ergens had gehoopt.</p><p>De grootste uitdaging binnen het maken van een AR app in SwiftUI was de communicatie tussen deze 2 technieken. SwiftUI heeft niet een native ARKit (Met SceneKit) ondersteuning. Hierdoor moest ik zelf een tussenlaag schrijven waarin SwiftUI een ViewController kon gebruiken. Maar daarmee heb ik niet de communicatie opgelost. Hiervoor moest ik een manager schrijven die met behulp van een protocol functies vanuit SwiftUI in AR kon uitvoeren.</p><blockquote><p>Als ik terugkijk naar deze oplossing had ik het anders gedaan. Ik zou gebruik maken van UIKit omdat de memory management hierin een stuk beter geregeld is. Daarnaast zou ik ook mijn basis beter hebben ingericht als ik wist hoeveel werk het uiteindelijk kostte om dit allemaal te refactoren. Raymond noemde dit Technical Depth, en als ik erzo naar kijk ben ik het met 'm eens.</p></blockquote><p>Het maken van een AR app was erg leuk, vooral tijdens het ontwikkelen van de kleine interactie prototypes. Op dat moment had ik het gevoel dat ik toch wel iets kon maken. Dat maakte mij trots en gaf mij motivatie.</p><h2>En nog meer</h2><p>Natuurlijk heb ik ook nog veel meer dingen gedaan dit semester. Ik ben bezig geweest met mijn hobby projecten waar ik onder andere een REST Api heb gemaakt. Dit was leuk om te doen omdat ik voor dit project de kans had genomen om te kijken naar een goed werkend structuur voor de backend. Hierdoor kon ik mijn code met een grote hoeveelheid verminderen. Daar word ik zelf erg blij van.</p><p>Al met al was het een leuk en leerzaam semester. Ik kijk nu al uit naar de volgende waarin ik mij wil gaan focussen op andere talen en misschien moet ik eens een moment nemen om mijn eigen site om te gooien.. Ooit.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/nieuwe-dingen-testen</guid><title>Nieuwe dingen testen</title><description>Hoe ga ik iets testen wat nog niet bestaat.</description><link>https://nordyvlasman.nl/posts/nieuwe-dingen-testen</link><pubDate>Tue, 5 Jan 2021 12:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Deze periode moesten we werken aan een Augmented Reality app. Hierin hebben we een aantal interacties verzonnen waar we niet zeker van wisten of dit werkte. Daarom moesten we dit testen. Maar hoe test je iets wat onbekend is bij iemand? Dat is iets waar ik mij in heb verdiept.</p><h2>Het begin</h2><p>Laten we beginnen bij het begin, wat hebben we gemaakt en wat willen we testen. Nou, leuk dat je dat vraagt Nordy. We hebben als test een nieuwe manier van interactie verzonnen die de gebruiker de kans geeft om het AR gedeelte van de app te besturen zonder het scherm aan te raken. Dit doen we met behulp van de handen en in een later stadium spraak. Het idee van ons was dat de gebruiker iets kon tekenen met de wijsvinger om vervolgens een duim omhoog te steken om te bevestigen dat de tekening klaar is. Vervolgens kwam er een popup op het scherm waar de gebruiker het probleem moest beschrijven door het uit te spreken. Een best innovatief idee als je het mij vraagt. Maar hoe laat je iemand zoiets doen zonder ook maar enige instructies te geven. Want het doel van de test is om te zien hoe logisch onze besturingen zijn en of dit ook echt werkt.</p><p>Dat is het punt dat je komt bij het prototype. Ik ben van mening dat als je zoiets wil testen, je ook een echt werkend prototype nodig hebt. Want hoe kan je anders de gebruikers het idee geven van wat ze doen. Juist, er moet dus een prototype komen. Na veel denkwerk is het mij gelukt om een werkend prototype uit de grond te stampen. Voor een beter beeld hierbij, zie: https://youtu.be/1E17iR3T-cE</p><h2>En toen... Koffie?</h2><p>Nee, zover zijn we nog niet. Koffie komt later wel, eerst maar eens een test voorbereiden. Hoe ga ik dit nou testen. Om de juiste aanpak te verzinnen heb ik eerst gekeken naar mijn vorige tests die ik in het verleden heb gedaan. Hierdoor kwam ik erachter dat ik niet echt heel gestructureerd getest heb in het verleden. Dat is iets waar ik nu misschien wel wat spijt van heb. Ik heb hierdoor naar mijn idee niet echt een goed beeld gekregen bij hoe ik nou echt een test moet inrichten (Behalve dan de test die ik moet programmeren). Gelukkig had ik nu wel een goed idee van wat ik wil testen en wat voor resultaten ik hieruit wil halen. Daarom kon ik eigenlijk al snel mijn focus leggen op het structuur van mijn test.</p><p>Aangezien we deze test vooral wilden weten of de controle die we hebben verzonnen ook logisch was. Had ik verzonnen dat we de gebruiker een opdracht zouden geven met een klein beetje context. In dit geval was dat, teken een gebied van een probleem en bevestig je tekening. Doe dit zonder ook maar een keer het scherm aan te raken. Met deze opdracht konden we dus duidelijk maken dat de gebruiker het scherm <em>niet</em> aan mocht raken, en alles dus op een andere manier gedaan moest worden. Vanuit daar kon ik kijken naar wat voor de gebruiker logisch is en of dit overeen komt met wat ik had gemaakt. Omdat ik ook visueel feedback geef tijdens het tekeken moest het voor de gebruiker al een beetje logischer worden van wat ze doen. Maar is een vinger logisch, en is die duim omhoog ook logisch. Daar zouden we achter komen.</p><h2>D-Day, let's test.</h2><p>Het was zover, we hadden de test voorbereid en ons prototype werkte goed genoeg om te testen. Ik ging naar school en vroeg wat mensen om te testen. Ik was best gespannen, want er zat nogal wat werk in het maken van dit prototype. Ik gaf de gebruikers mn mobiel en een opdracht met de vraag erbij: "Wat voelt voor jou logisch om te doen, doe dat". Dat was het moment dat mijn prototype gebruikt werd en ik erachter kwam dat mijn gedachten niet helemaal klopte met wat er echt zou gebeuren.</p><p>Om te beginnen zagen mensen niet meteen wat er gebeurde, ze verwachten iets te zien op het scherm voordat ze ook maar iets zouden doen. Ik moest ze dus toch vertellen dat er niks op het scherm zou komen qua instrcuties. Vanaf dat moment gingen ze al redelijk snel bezig met dingen proberen. Om te beginnen hielden ze hun hand voor de camera om te zien of er iets zou gebeuren. Toen ik vroeg waarom ze dat deden kreeg ik van een het antwoord "Omdat ik wil zien of er al iets getekend zou worden". Dit was echter niet het geval. Langzaam maar zeker kwamen ze erachter wat wel werkte. Door het opsteken van een hand detecteerde mijn applicatie de wijsvinger. Hierdoor ontstonden er een aantal stipjes. Sommige kwamen er hierdoor achter dat je met je wijsvinger dingen kon tekenen, hierdoor gingen ze naar de muur en tekende ze een klein rondje. Vervolgens lieten ze hun vinger rusten op een eindpositie. Waarom? "Omdat ik klaar ben met tekenen, dan wacht ik als bevestiging. Het viel op dat voor veel mensen dit een logische vervolgstap was. Want als ik aangeef waar iets is ga ik niet een duim omhoog steken. Nee ik rust mijn vinger even en bevestig het dan.</p><blockquote><p>Als ik hierover na ga denken, ben ik van mening dat ik tijdens het verzinnen van mijn oplossing te veel heb gekeken naar het programmeer gedeelte. Hierdoor liet ik het menselijke onderdeel van dit prototype een beetje links liggen. Als ik logisch had nagedacht, zou ik ook op de rust oplossing komen.</p></blockquote><h2>Conclusie</h2><p>Uit deze ene testsessie heb ik veel kunnen leren. Om te beginnen bij mijn concept. Ik ben een programmeur, ik denk eerder in code dan in wat de gebruiker doet en wat logisch is voor een gebruiker. Hierdoor ben ik op een struikelblok gekomen dat mijn prototype niet overeen kwam met de verwachting van de testpersonen. Ik moet in het vervolg minder mijn programmeerbril opzetten en meer mijn menselijke (IEL). Verder heb ik geleerd dat ik beter moet nadenken hoe ik een test inricht. Als ik even beter voorbereid, kan ik ook veel betere resultaten krijgen waar we ook wat mee kunnen. Dit heb ik ook gedaan bij mijn volgende test. Hierbij heb ik opdrachten gemaakt die de gebruiker moest doen en heb ik telkens gevraagd waarom ze dat doen en wat ze verwachten. Vanaf dat moment zag ik ook dat ik dingen aan moest passen aan mijn app. Zo heb ik uit een test gemerkt dat het niet handig is dat de gebruiker direct het model kan verplaatsen. Soms doen ze dit perongeluk. Daarom heb ik een bewerkmodus toegevoegd. Welke ik later direct inschakelde bij het toevoegen van een model. Door te testen, kan ik mijn product telkens beter maken. Dat is dus een win win.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/vue-3-en-allemaal-andere-dingen</guid><title>Vue 3 en allemaal andere dingen</title><description>Een week vol knutselen met onder andere Vue 3, Swift en Laravel</description><link>https://nordyvlasman.nl/posts/vue-3-en-allemaal-andere-dingen</link><pubDate>Fri, 9 Oct 2020 13:30:00 +0200</pubDate><content:encoded><![CDATA[<p>18 September was het dan zo ver. Vue 3 werd uitgebracht, met daarin als belangrijkste verandering de <a href="https://github.com/vuejs/composition-api">Composition Api</a>. Met deze verandering wordt het programmeren in Vue compleet veranderd, waar je voorheen de options api gebruikte met daarin de diverse functies. Maak je nu alles "zelf", je hebt dus geen data property meer maar Ref's. De werking van de composition api is redelijk te vergelijken met React.</p><p><strong>Voorbeeld Vue 3 Composition</strong></p><pre><code><div class="highlight"><span></span><span class="p">&lt;</span><span class="n">template</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">h1</span><span class="p">&gt;</span><span class="n">Counter</span><span class="o">&lt;/</span><span class="n">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">h3</span><span class="p">&gt;</span><span class="n">Current</span> <span class="bp">count</span><span class="p">:</span> <span class="p">{{</span> <span class="bp">count</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">h3</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">button</span> <span class="p">@</span><span class="n">click</span><span class="p">=</span><span class="s">&quot;decrement&quot;</span><span class="o">&gt;-&lt;/</span><span class="n">button</span><span class="p">&gt;</span> <span class="o">|</span> <span class="p">&lt;</span><span class="n">button</span> <span class="p">@</span><span class="n">click</span><span class="p">=</span><span class="s">&quot;increment&quot;</span><span class="o">&gt;+&lt;/</span><span class="n">button</span><span class="p">&gt;</span>
  <span class="o">&lt;/</span><span class="n">div</span><span class="p">&gt;</span>
<span class="o">&lt;/</span><span class="n">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">script</span><span class="p">&gt;</span>
<span class="kd">import</span> <span class="p">{</span> <span class="nc">ref</span> <span class="p">}</span> <span class="nc">from</span> <span class="err">&#39;</span><span class="nc">vue</span><span class="err">&#39;</span>
<span class="n">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">const</span> <span class="bp">count</span> <span class="p">=</span> <span class="n">ref</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">const</span> <span class="n">increment</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=</span><span class="o">&gt;</span> <span class="p">{</span>
      <span class="bp">count</span><span class="p">.</span><span class="n">value</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="n">const</span> <span class="n">decrement</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=</span><span class="o">&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="bp">count</span><span class="p">.</span><span class="n">value</span> <span class="p">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
      <span class="bp">count</span><span class="p">.</span><span class="n">value</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="bp">count</span><span class="p">,</span>
      <span class="n">increment</span><span class="p">,</span>
      <span class="n">decrement</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</div></code></pre><p><strong>Voorbeeld Vue 2 Options API</strong></p><pre><code><div class="highlight"><span></span><span class="p">&lt;</span><span class="n">template</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">h1</span><span class="p">&gt;</span><span class="n">Counter</span><span class="o">&lt;/</span><span class="n">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">h3</span><span class="p">&gt;</span><span class="n">Current</span> <span class="bp">count</span><span class="p">:</span> <span class="p">{{</span> <span class="bp">count</span> <span class="p">}}</span><span class="o">&lt;/</span><span class="n">h3</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">button</span> <span class="p">@</span><span class="n">click</span><span class="p">=</span><span class="s">&quot;decrement&quot;</span><span class="o">&gt;-&lt;/</span><span class="n">button</span><span class="p">&gt;</span> <span class="o">|</span> <span class="p">&lt;</span><span class="n">button</span> <span class="p">@</span><span class="n">click</span><span class="p">=</span><span class="s">&quot;increment&quot;</span><span class="o">&gt;+&lt;/</span><span class="n">button</span><span class="p">&gt;</span>
  <span class="o">&lt;/</span><span class="n">div</span><span class="p">&gt;</span>
<span class="o">&lt;/</span><span class="n">template</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">script</span><span class="p">&gt;</span>
<span class="n">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="n">data</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="bp">count</span><span class="p">:</span> <span class="mi">0</span>
    <span class="p">}</span>
  <span class="p">},</span>

  <span class="n">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="n">decrement</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">this</span><span class="p">.</span><span class="bp">count</span> <span class="p">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
      <span class="n">this</span><span class="p">.</span><span class="bp">count</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="p">},</span>

    <span class="n">increment</span><span class="p">()</span> <span class="p">{</span>
      <span class="n">this</span><span class="p">.</span><span class="bp">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="n">script</span><span class="p">&gt;</span>
</div></code></pre><p>Zoals je hierboven ziet, is er genoeg veranderd. Naar mijn mening is dit goed. Voornamelijk omdat je nu je component methods kan verdelen in extra bestanden. Hierdoor hou je specifieke functions gescheiden en blijft je bestand een stuk kleiner. Daarnaast is de composition api ook een verbetering voor Typescript, wat eerder nog een beetje hacky leek, is nu veranderd naar een veel logischere versie.</p><blockquote><p>Voor meer informatie over Vue 3 kijk vooral even hier: <a href="https://www.youtube.com/watch?v=WLpLYhnGqPA" target="_blank">https://www.youtube.com/watch?v=WLpLYhnGqPA</a></p></blockquote><h2>Knutseltijd met Swift</h2><p>Jawel, ik ben ondertussen al 2 vrijdagen bezig geweest met mijn Declarative UI package. Het doel hiervan is om mijn Backend data (JSON) over te zetten naar SwiftUI. Hiermee wil ik eigenlijk leren hoe ik een swift package moet maken met daarin de juiste structuur. Best wel een gedoe hoor. Maar hierover later een kee meer.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/tutorial-week</guid><title>Swift design patterns.</title><description>Swift design patterns</description><link>https://nordyvlasman.nl/posts/tutorial-week</link><pubDate>Fri, 9 Oct 2020 12:30:00 +0200</pubDate><content:encoded><![CDATA[<p>Aan het begin van de periode had ik mijzelf een doel gegeven. Beter worden in het maken van iOS apps door middel van Swift. Het idee hiervan is dat ik tot nu toe veel dingen doe die of op internet staan of niet optimaal gemaakt zijn. Hierdoor kan het zijn dat de apps traag worden en dus niet fijn werken.</p><h2>Maar hoe wil ik dit aanpakken?</h2><p>Om te beginnen heb ik een aantal boeken aangeschaft. Het gaat hier om de boeken van <a href="https://hackingwithswift.com">Hacking With Swift</a> waarbij mijn focus vooral uitgaat op Swift design patterns en Testing in swift. Dit omdat ik voor mijn kennis over Swift goed gebruik kan maken van Swift design patterns. En als ik dit goed combineer met Testing in Swift, kan ik functionaliteit direct controleren op werking.</p><p>Voor de komende aantal weken ga ik mij dus bezig houden met het lezen van Swift boeken en het uitproberen van nieuwe design patterns.</p><h2>1e tutorial week</h2><p>Voor een logische volgorde ben ik in de 1e tutorial week begonnen met het boek <a href="https://www.hackingwithswift.com/store/swift-design-patterns">Swift design patterns</a>. Waarom is dit logisch? Simpel, omdat een gestructureerde code goed ingericht is.<br><br>Waarom heb ik eigenlijk gekozen voor een boek in plaats van een udemy course? Dit is voornamelijk omdat ik het prettiger vindt om dingen te lezen in plaats van telkens op pauze te drukken om iets na te moeten doen. Daarnaast is het ook erg fijn om iets te hebben waar je snel terug op kan komen door even snel het boek erbij te pakken.</p><h3>Mijn voortgang</h3><p>In de 1e tutorial week ben ik dus begonnen met het boek, in dit boek wordt op een prettige manier uitgelegd hoe diverse design patterns werken. Daarnaast word er uitgebreid uitgelegd wat de gedachtengang achter bepaalde onderwerpen is met daarbij eigen ervaringen.</p><p>Protocol, initializers, extensions, alles komt wel naar voren in het boek. Aan het begin was dit best wel overwhelming, ik kon apps maken in Swift maar dacht nooit echt na hoe en waarom ik iets doe. Door dit boek ben ik heel anders gaan denken over bepaalde keuzes die ik maak. Bijvoorbeeld hoe ik mijn code verdeel in logische structuur, voorheen had ik alles in mijn ViewController. Sommige models stonden er los van, maar verder alle logische data kwam daarin. Hierdoor krijg je een erg lang bestand die niet meer leesbaar is.</p><h2>Toepassen</h2><p>Nu ik zoveel geleerd heb van dit boek, wil ik het een en ander ook gaan toepassen. Voor TGIF is mijn doel om een Backend Driven UI package te schrijven voor SwiftUI. Hierdoor wil ik mijn kennis die ik heb verkregen van het boek toepassen in een package. Dit is namelijk een perfecte plaats om structuur te testen. Mijn voortgang van dit project is te zien op <a href="https://github.com/NordyVlasman/declarative-swiftui" target="_blank">github</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/publish</guid><title>Een blog maken in Publish en TailwindCSS</title><description>Ik ben toch maar voor publish gegaan, was wat leuker :)</description><link>https://nordyvlasman.nl/posts/publish</link><pubDate>Tue, 22 Sep 2020 12:30:00 +0200</pubDate><content:encoded><![CDATA[<p>Jawel, ik kon het niet laten. Mijn vorige blog/ site (geschreven in NextJS) was er net 2 weken en ik wilde al iets nieuws. Daar ging ik weer, ik opende mn terminal en ik starte een nieuw project.</p><pre><code><div class="highlight"><span></span>$ Publish new nordyvlasman
</div></code></pre><p>Huh maar dat is helemaal niet een bekend frontend framework, wat doe ik nou?!? Jawel, ik ging een poging wagen met <a href="https://github.com/johnsundell/publish" target="_blank">Publish</a>.</p><h2>Wat is Publish dan?</h2><p>Leuk dat je dat vraagt! Publish is een statische website generator (Praise letterlijke vertaling.. Sorry 🤦‍♂️) gemaakt door John Sundell. De github pagina van Publish zegt het volgende erover.</p><blockquote><p>Welcome to Publish, a static site generator built specifically for Swift developers. It enables entire websites to be built using Swift, and supports themes, plugins and tons of other powerful customization options.</p></blockquote><p>Klinkt heel fancy, en ja, dat is het ook. Het genot van werken met Swift in combinatie met TailwindCSS is niet te beschrijven. Je kan zeggen dat het overbodig veel werk is om een simpele site te maken. Maar, naast dat het technisch erg leuk is. Zit het ook nog eens heel goed in elkaar. Waarom zou je wel een Javascript framework gebruiken en niet zoiets?</p><h2>Je hebt je punt gemaakt Nordy, ga verder..</h2><p>Oke oke, fijn. Dan kan ik nu lekker technisch gaan doen 🤗.</p><p><strong>Disclaimer:</strong> <em>Alles wat hieronder staat is gebaseerd op wat ik zelf heb gemaakt en mijn ervaringen. Dit kan voor een ieder anders zijn!</em></p><p>Mijn "vorige" blog was in NextJS en Tailwind gemaakt en zag er naar mijn mening niet verkeerd uit. Daarom was mijn doel om NextJS te vervangen voor Publish en tailwind met zijn stijlen te behouden in de nieuwe omgeving. Makje toch?</p><p>Ja nou niet zo snel, tijdens mijn zoektocht naar de juiste manier om tailwind toe te voegen aan mijn project. Ben ik tegen een aantal problemen aangelopen. TailwindCSS heeft namelijk 2 manieren om te gebruiken. Je kan de minified versie ophalen vanuit een CDN of je kan NPM/ Yarn gebruiken om de code binnen te krijgen. Dat laatste is de meest voorkomende variant, dit geeft je namelijk veel meer vrijheid bij het customizen van de Tailwind style. Maar hoe ga ik ooit een manier vinden om een npm package toe te voegen aan een swift project 🤔.</p><p>Ik heb dit voor elkaar gekregen door in de main folder van het project een commando uit te voeren die ik al erg vaak heb uitgevoerd.</p><pre><code><div class="highlight"><span></span>yarn add tailwindcss
</div></code></pre><p>Daar ging mijn terminal, zoekend naar de juiste packages om in het project te stoppen. Niets en niemand die hem tegen hield. En jawel, na enige tijd (want het blijft een variant van npm) had ik daar 3 nieuwe bestanden/ mappen. - Package.json - Yarn.lock - node_modules (Met daarin inmens veel mapjes met weet ik veel wat) Tailwind was klaar om gebruikt te worden.</p><h3>Van tailwind naar css</h3><p>Tailwind stond op mn computer maar werd nog niet gebruikt. Het was dus tijd om tailwind zijn werk te laten doen. Dit was het moment waar ik moest nadenken. Het is voor een tailwind project gebruikelijk dat je een config bestand aanmaakt in de root map. Maar dit is niet een gebruikelijk project. Na een diepe speurtocht op het internet kwam ik een artikel tegen die mij precies uitlegde hoe ik dit moest doen: <a href="https://paraside.in/design+code/publish+tailwindcss/"> Power your Publish (Swift) static site with Tailwind CSS</a>. Volgens dit artikel moest ik mijn configuratie bestand in mijn Thema stoppen. In deze map kwamen dan ook theme.css en styles.css. Is dit wel de juiste manier vroeg ik mij af.</p><img src="https://media1.tenor.com/images/859b945f2ceaa00508d24a1340e2643d/tenor.gif?itemid=11946992"/><p>Oke, dat is wel heel snel maar het is wel echt waar. Ik heb het geprobeerd maar het voelde niet goed, in het kader van automatiseren en goed voor het oog, heb ik besloten om mijn eigen oplossing te gebruiken.</p><h3>Wat voor oplossing is dat dan?</h3><p>In 1 woord, Gulp. Ik heb in dit project gulp toegevoegd om mijn Tailwind configuratie om te zetten naar een minified css bestand die ik vervolgens in kan laden in mijn publish project. Dit ziet er dan zo uit:</p><pre><code><div class="highlight"><span></span><span class="kr">const</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">tailwindConfig</span> <span class="o">=</span> <span class="s2">&quot;tailwind.config.js&quot;</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">mainCSS</span> <span class="o">=</span> <span class="s2">&quot;./Resources/MyTheme/theme.css&quot;</span><span class="p">;</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s2">&quot;css&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">atimport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;postcss-import&quot;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">postcss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;gulp-postcss&quot;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">tailwindcss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;tailwindcss&quot;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">rename</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-rename&#39;</span><span class="p">);</span>
    <span class="kr">const</span> <span class="nx">cleanCSS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-clean-css&#39;</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">gulp</span>
        <span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">mainCSS</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">postcss</span><span class="p">([</span><span class="nx">atimport</span><span class="p">(),</span> <span class="nx">tailwindcss</span><span class="p">(</span><span class="nx">tailwindConfig</span><span class="p">)]))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">cleanCSS</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">rename</span><span class="p">(</span><span class="s1">&#39;styles.css&#39;</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s2">&quot;./Resources/MyTheme/&quot;</span><span class="p">));</span>
<span class="p">});</span>
</div></code></pre><p><em>gulpfile.js</em></p><p>Ik begin in dit bestand met het importeren van de nodige tools en bestanden. In dit geval gulp, mainCSS en tailwindConfig. Gulp wordt gebruikt voor het converteren van tailwindcss naar css. TailwindConfig voor de configuratie van tailwind (andere kleuren, typografie etc). en mainCSS is het bestand waarin ik tailwind importeer en aanpas daar waar nodig.</p><p>In de CSS Task importeer ik vervolgens de nodige tools om het bestand te kunnen hernoemen, minifieen en verifiëren.</p><p>De configuratie van gulp is klaar. Maar hoe gebruik ik dit? Simpel, met yarn, ik heb in mijn package.json een script toegevoegd die hiervoor zorgt.</p><pre><code><div class="highlight"><span></span>  <span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&quot;build&quot;</span><span class="p">:</span> <span class="s2">&quot;gulp css --silent&quot;</span>
  <span class="p">}</span>
</div></code></pre><p>Zoals je ziet, kan ik nu yarn build intypen in mijn terminal om vervolgens te zien hoe mijn tailwind omgezet wordt naar css.</p><h2>Hey leuk joh! Maar hoe zit dat met publish dan?</h2><p>Ja, nou kijk. Nu kan ik in publish bij het defineren van mijn thema aangeven welk css bestand ik wil gebruiken. In dit geval is dat <code>MyThemes/Style.css</code> dit bestand wordt vervolgens gebruikt over de hele website. Hierdoor kan ik aan elk html element een class toevoegen die vervolgens een mooi resultaat geeft kijk maar eens hoe ik dat doe.</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">Node</span> <span class="k">where</span> <span class="n">Context</span> <span class="p">==</span> <span class="n">HTML</span><span class="p">.</span><span class="n">BodyContext</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">siteHeader</span><span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">Website</span><span class="p">&gt;(</span><span class="k">for</span> <span class="n">context</span><span class="p">:</span> <span class="n">PublishingContext</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)</span> <span class="p">-&gt;</span> <span class="n">Node</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">header</span><span class="p">(</span>
            <span class="p">.</span><span class="n">wrapper</span><span class="p">(</span>
                <span class="p">.</span><span class="n">nav</span><span class="p">(</span>
                    <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;site-name&quot;</span><span class="p">),</span>
                    <span class="p">.</span><span class="n">a</span><span class="p">(</span>
                        <span class="p">.</span><span class="n">href</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">),</span>
                        <span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">name</span><span class="p">),</span>
                        <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;font-bold text-blue-500 text-2xl hover:text-blue-700&quot;</span><span class="p">)</span>
                    <span class="p">)</span>
                <span class="p">)</span>
            <span class="p">),</span>
            <span class="p">.</span><span class="n">wrapper</span><span class="p">(</span>
                <span class="p">.</span><span class="n">a</span><span class="p">(</span>
                    <span class="p">.</span><span class="n">href</span><span class="p">(</span><span class="s">&quot;https://github.com/NordyVlasman&quot;</span><span class="p">),</span>
                    <span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="s">&quot;Github &amp;rarr;&quot;</span><span class="p">),</span>
                    <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;font-medium text-gray-500 hover:text-gray-700&quot;</span><span class="p">)</span>
                <span class="p">),</span>
                <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;text-base leading-5&quot;</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="p">.</span><span class="kd">class</span><span class="p">(</span><span class="s">&quot;flex justify-between items-center py-10&quot;</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Wat je hier ziet is de header van deze website. Hierin staat een titel en een link naar mijn github pagina. Voor elk html element heb ik een class property toegevoegd waar ik vervolgens mijn stijl aan kan geven. Mooi he?</p><h2>Conclusie</h2><p>De combinatie van Swift Publish met TailwindCSS is erg sterk. Je moet alleen wel de juiste manier vinden om dit netjes te doen. In mijn <a href="https://github.com/NordyVlasman/nordyvlasman" target="_blank">github repository</a> kan je verder kijken naar hoe ik mijn website in elkaar heb gesleuteld. Wellicht vindt je het interessant 😊.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nordyvlasman.nl/posts/een-blog-maken-in-nextjs</guid><title>Een blog maken in NextJS en TailwindCSS</title><description>Een kleine beschrijving over mijn ervaring van het maken van een blog in NextJS.</description><link>https://nordyvlasman.nl/posts/een-blog-maken-in-nextjs</link><pubDate>Mon, 31 Aug 2020 12:00:00 +0200</pubDate><content:encoded><![CDATA[<p>Voor de minor 'The next web' kreeg ik de opdracht om een blog te maken waarin ik bij kan houden wat ik leer en uitspook. Dit kwam op een perfect moment, ik was al een tijdje van plan om NextJS te leren maar kon niet iets vinden waarvoor ik het kon gebruiken. Daarom pakte ik mijn kans om mijn blog te maken in <a href="https://nextjs.org/" target="_blank">NextJS</a> in combinatie met <a href="https://tailwindcss.com/" target="_blank">Tailwind</a> want dat is awesome.</p><blockquote><p>Op dit moment is dit 'artikel' verouderd. Ik heb mijn blog omgezet naar Publish. Meer hierover kan je <a href="https://nordyvlasman.nl/posts/publish/">hier</a> lezen.</p></blockquote><h2>Wat is NextJS?</h2><p>NextJS is een framework gebaseerd, afgeleid van het framework ReactJS. Dat klinkt best raar. Maar het valt best wel mee, Vue heeft Nuxt, React heeft Next (En Gatsby en Blitz en weet ik veel wat nog meer. Mensen zijn slecht in het maken van keuzes 🤦‍♂️). Het geeft volgens hun zelf de beste ontwikkelaar ervaring met alle toevoegingen die je nodig hebt in productie. Statisch en Server rendering, Typescript, Route pre-fetching!! en meer, zonder configuratie. Dat is een lange zin die mij zelf erg enthousiast maakt, dus ging ik erop los.</p><h2>Mijn ervaring</h2><p>NextJS is op zichzelf een fijn en eenvoudige toevoeging over React zelf. In verband met mijn tot nu toe redelijk korte ervaring met Typescript heb ik er voor gekozen om plain JS te gebruiken. De makkelijkheden zoals Route prefetching maken je leven een stuk eenvoudiger. Daarnaast is het erg eenvoudig om Markdown support toe te voegen en je eigen componentjes te maken. Kortom, een fijne tool als je verder wilt kijken dan alleen ReactJS. Maar, begin daar wel eerst mee. Het is nog steeds erg nuttig om de kennis van React te hebben tijdens het ontwikkelen van een Next applicatie.</p><p>Je kan natuurlijk ook voor Vue of Angular kiezen, of ieder ander opkomende framework waar je vrolijk van wordt. Maar voor de uitdaging is React toch echt wel leuker.</p><h3>Mag ik nog heel even?</h3><p>Wil je geen uitdaging en wel een frontend framework gebruiken? Ga dan lekker voor NuxtJS. Je hebt niet veel kennis nodig en je kan meteen aan de slag 🥳.</p>]]></content:encoded></item></channel></rss>